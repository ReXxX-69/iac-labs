name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    concurrency:
      group: "install-dependencies-${{ github.ref }}"
      cancel-in-progress: true

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Add Poetry to PATH
        run: echo "/home/student/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "/home/student/.local/bin" >> $GITHUB_PATH

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
          key: ${{ runner.os }}-poetry-dependencies-${{ hashFiles('example-app/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-dependencies-

      - name: Go to example-app directory
        run: cd example-app

      - name: Install project dependencies
        run: /home/student/.local/bin/poetry install --no-root  # Użycie pełnej ścieżki do poetry

  linting:
    runs-on: ubuntu-latest
    concurrency:
      group: "linting-${{ github.ref }}"
      cancel-in-progress: true
    needs: install-dependencies

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Add Poetry to PATH
        run: echo "/home/student/.local/bin" >> $GITHUB_PATH

      - name: Go to example-app directory
        run: cd example-app  # Upewniamy się, że jesteśmy w katalogu z plikiem pyproject.toml

      - name: Run Linter
        run: /home/student/.local/bin/poetry run task lint  # Użycie pełnej ścieżki do poetry

      - name: Run Formatter
        run: /home/student/.local/bin/poetry run task formatter  # Użycie pełnej ścieżki do poetry

      - name: Run Security Check
        run: /home/student/.local/bin/poetry run task security  # Użycie pełnej ście
